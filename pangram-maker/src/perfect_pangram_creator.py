#!/usr/bin/env python3
"""
完全パングラム作成支援ツール
意味のある46文字の完全パングラムを目指す
"""

import itertools
import random
from collections import defaultdict

# ひらがな46文字
HIRAGANA = list('あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん')

# 有効な2文字、3文字の単語
VALID_WORDS = {
    2: ['あい', 'あお', 'あか', 'あき', 'あさ', 'あし', 'あせ', 'あと', 'あな', 'あに', 'あね', 'あめ', 
        'いえ', 'いか', 'いき', 'いく', 'いし', 'いす', 'いた', 'いち', 'いと', 'いぬ', 'いま', 'いも',
        'うえ', 'うし', 'うた', 'うち', 'うで', 'うま', 'うみ', 'うら', 
        'えき', 'えだ', 'えと', 'えび',
        'おか', 'おき', 'おく', 'おと', 'おに', 'おび', 'おや',
        'かい', 'かお', 'かき', 'かぎ', 'かさ', 'かた', 'かに', 'かね', 'かび', 'かみ', 'かめ', 'かも',
        'きく', 'きし', 'きた', 'きち', 'きつ', 'きね', 'きび', 'きみ', 'きも', 'きり',
        'くさ', 'くし', 'くち', 'くつ', 'くに', 'くび', 'くま', 'くも', 'くら', 'くり', 'くろ',
        'けさ', 'けし', 'けた', 'けむ',
        'こい', 'こえ', 'こし', 'こと', 'こな', 'こま', 'こめ',
        'さか', 'さき', 'さく', 'さけ', 'さし', 'さと', 'さび', 'さむ', 'さる',
        'しお', 'しか', 'した', 'しま', 'しも', 'しろ',
        'すし', 'すな', 'すみ',
        'せき', 'せと', 'せみ',
        'そこ', 'そと', 'そば', 'そら',
        'たか', 'たき', 'たこ', 'たし', 'たて', 'たに', 'たね', 'たび', 'たま', 'ため',
        'ちち', 'ちと', 'ちめ',
        'つき', 'つち', 'つな', 'つの', 'つば', 'つめ', 'つゆ', 'つら',
        'てき', 'てら',
        'とき', 'とこ', 'とし', 'とち', 'とも', 'とら', 'とり',
        'なか', 'なし', 'なた', 'なつ', 'なに', 'なべ', 'なみ', 'なめ',
        'にく', 'にし', 'にち', 'にわ',
        'ぬの', 'ぬま',
        'ねこ', 'ねつ',
        'のこ', 'のち', 'のみ', 'のり',
        'はし', 'はた', 'はち', 'はと', 'はな', 'はね', 'はは', 'はま', 'はや', 'はら', 'はり', 'はる',
        'ひし', 'ひと', 'ひな', 'ひび', 'ひま', 'ひも', 'ひや', 'ひる',
        'ふく', 'ふし', 'ふた', 'ふち', 'ふで', 'ふね', 'ふゆ', 'ふろ',
        'へた', 'へび', 'へや',
        'ほし', 'ほね', 'ほら',
        'まえ', 'まき', 'まく', 'また', 'まち', 'まつ', 'まと', 'まね', 'まめ', 'まゆ', 'まる',
        'みき', 'みず', 'みせ', 'みそ', 'みち', 'みつ', 'みね', 'みみ', 'みや',
        'むき', 'むし', 'むね', 'むら', 'むれ',
        'めし', 'めん',
        'もち', 'もと', 'もの', 'もも', 'もり',
        'やく', 'やし', 'やど', 'やね', 'やま',
        'ゆき', 'ゆび', 'ゆめ',
        'よこ', 'よし', 'よる',
        'らく',
        'りく', 'りつ',
        'るす',
        'れい', 'れき', 'れつ',
        'ろく',
        'わか', 'わき', 'わけ', 'わし', 'わた', 'わに', 'わび', 'わら', 'わり'],
    3: ['あいて', 'あかい', 'あかり', 'あきら', 'あくび', 'あさひ', 'あした', 'あせる', 'あそぶ', 'あたま', 
        'あつい', 'あとで', 'あなた', 'あにき', 'あねご', 'あまい', 'あめり', 'あらし', 'ありす', 'あるく',
        'いきる', 'いくつ', 'いけど', 'いしき', 'いずみ', 'いたい', 'いちご', 'いつか', 'いつも', 'いのち',
        'うさぎ', 'うしろ', 'うたう', 'うちわ', 'うつる', 'うでわ', 'うまい', 'うみべ', 'うらら', 'うれし',
        'えがお', 'えきち', 'えだま', 'えのぐ', 'えほん', 'えもじ', 'えらい', 'えらぶ',
        'おいし', 'おうち', 'おかし', 'おきる', 'おくれ', 'おさけ', 'おしい', 'おそい', 'おたく', 'おちる',
        'かいが', 'かえる', 'かおる', 'かがく', 'かがみ', 'かきね', 'かくし', 'かける', 'かさい', 'かしこ',
        'きいろ', 'きえる', 'きかい', 'きくち', 'きけん', 'きこえ', 'きしゃ', 'きせつ', 'きそく', 'きたい',
        'くうき', 'くさい', 'くしゃ', 'くすり', 'くちる', 'くつう', 'くにお', 'くもり', 'くらい', 'くりき',
        'けいと', 'けがれ', 'けしき', 'けむり', 'けんか',
        'こいし', 'こうえ', 'こくご', 'こころ', 'こしつ', 'こたえ', 'ことば', 'こなつ', 'このみ', 'こばと',
        'さいご', 'さかな', 'さくら', 'さけび', 'さしみ', 'さとし', 'さびし', 'さむい', 'さよう', 'さらい',
        'しあい', 'しかい', 'しくみ', 'しごと', 'しずか', 'したい', 'しつれ', 'しなる', 'しぬる', 'しばい',
        'すいか', 'すうじ', 'すがた', 'すきま', 'すくい', 'すごい', 'すずき', 'すなお', 'すばる', 'すみれ',
        'せいか', 'せかい', 'せつめ', 'せなか', 'せまい', 'せんせ',
        'そうじ', 'そくど', 'そこら', 'そつぎ', 'そとで', 'そのま', 'そばに', 'そらい', 'それで', 'そろう']
}

def find_perfect_pangram_manual():
    """手動で調整しながら完全パングラムを作成"""
    
    # 有望な部分構造
    structures = [
        # 助詞「を」を含む構造
        ('ゆめを', ['ゆ', 'め', 'を']),  # 夢を
        ('そらを', ['そ', 'ら', 'を']),  # 空を
        ('ほんを', ['ほ', 'ん', 'を']),  # 本を
        
        # 文末の「ん」を含む構造
        ('みかん', ['み', 'か', 'ん']),
        ('にほん', ['に', 'ほ', 'ん']),
        ('せけん', ['せ', 'け', 'ん']),
        
        # 希少文字「ぬ」を含む構造
        ('ぬの', ['ぬ', 'の']),    # 布
        ('いぬ', ['い', 'ぬ']),    # 犬
        ('きぬ', ['き', 'ぬ']),    # 絹
        
        # その他の有用な単語
        ('はる', ['は', 'る']),    # 春
        ('なつ', ['な', 'つ']),    # 夏
        ('あき', ['あ', 'き']),    # 秋
        ('ふゆ', ['ふ', 'ゆ']),    # 冬
        ('やま', ['や', 'ま']),    # 山
        ('うみ', ['う', 'み']),    # 海
        ('かぜ', ['か', 'ぜ']),    # 風
        ('ひと', ['ひ', 'と']),    # 人
        ('ねこ', ['ね', 'こ']),    # 猫
        ('とり', ['と', 'り']),    # 鳥
        ('はな', ['は', 'な']),    # 花（重複注意）
        ('ほし', ['ほ', 'し']),    # 星
        ('つき', ['つ', 'き']),    # 月（重複注意）
        ('くも', ['く', 'も']),    # 雲
        ('あめ', ['あ', 'め']),    # 雨（重複注意）
        ('ゆき', ['ゆ', 'き']),    # 雪（重複注意）
    ]
    
    # 試行1: 季節をテーマに
    attempt1 = "はるなつあきふゆ、そらをみて、かぜふく。やまのうえ、ほしがひかり、つきもでる。ねこいぬとり、くさはなさく。ゆめをみた、せけんわひろし。ぬのきもちよい。"
    
    # 試行2: より短く
    attempt2 = "ゆめをみた。はるかぜふき、さくらちる。なつうみへいく。あきもみじ、ふゆのゆき。わかものとしより、ぬのふくきて。ほしぞらに、つきひかる。ねこがなく、えきでけんか。"
    
    # 試行3: 46文字を目指す
    # まず使用する文字を整理
    used_chars = set()
    result = []
    
    # 必須の難しい文字から配置
    # 「を」を含む: ゆめを（3文字）
    result.append('ゆめを')
    used_chars.update(['ゆ', 'め', 'を'])
    
    # 「ん」を含む: せけん（3文字）
    result.append('みかん')
    used_chars.update(['み', 'か', 'ん'])
    
    # 「ぬ」を含む: ぬの（2文字）
    result.append('ぬの')
    used_chars.update(['ぬ', 'の'])
    
    # 残り: 46 - 8 = 38文字
    remaining = [c for c in HIRAGANA if c not in used_chars]
    
    print("=== 完全パングラム作成支援 ===")
    print(f"使用済み文字（{len(used_chars)}文字）: {''.join(sorted(used_chars))}")
    print(f"残り文字（{len(remaining)}文字）: {''.join(remaining)}")
    print(f"現在の構成: {''.join(result)}")
    
    return result, remaining

def create_near_perfect_pangram():
    """準完全パングラム（最小重複）を作成"""
    
    # アルゴリズム生成の46文字版をベースに改良
    base = "あねそせしろむいぬのほふひへくはけたれきみなにわこうえまちおやすりかさるともつめてらんゆよを"
    
    # より自然な配置を試みる
    improved_versions = [
        # バージョン1: 単語を意識
        "あさひがのぼり、ゆめをみた。なつうみへいく。ふゆのゆきこんこん。わかものとしより、ぬのふくきて、やまへ。ほしぞらに、つきでる。ねこがなく。えきでけんか、むしがとぶ。はるかぜふき、ちるさくら。",
        
        # バージョン2: より短く
        "ゆめをみるこ。はるさくらちり、なつうみおよぐ。あきもみじ、ふゆゆきふる。わかものとしより、ぬのきて。ほしぞらへ、ねこいぬ、えきでけんか。むしがなく、かぜそよぐ。",
        
        # バージョン3: 最短を目指す
        "はるかぜふきゆめをみたなつうみへいくあきもみじちるふゆのゆきこんこんわかものとしよりぬのふくきてやまへほしぞらにつきでるねこがなくえきでけんかむしとぶそれ"
    ]
    
    return improved_versions

if __name__ == "__main__":
    # 完全パングラム作成支援
    result, remaining = find_perfect_pangram_manual()
    
    print("\n=== 準完全パングラムの候補 ===")
    versions = create_near_perfect_pangram()
    
    for i, version in enumerate(versions, 1):
        print(f"\nバージョン{i}:")
        print(version)
        print(f"文字数: {len(version)}")
        
        # 文字カウント
        char_count = {}
        for c in version:
            if c in HIRAGANA:
                char_count[c] = char_count.get(c, 0) + 1
        
        # 統計
        total_chars = sum(char_count.values())
        unique_chars = len(char_count)
        max_duplicates = max(char_count.values()) if char_count else 0
        
        print(f"ひらがな総数: {total_chars}")
        print(f"異なり文字数: {unique_chars}/46")
        print(f"最大重複数: {max_duplicates}")
        
        # 不足文字
        missing = [c for c in HIRAGANA if c not in char_count]
        if missing:
            print(f"不足文字: {''.join(missing)}")
        
        # 重複文字
        duplicates = {c: count for c, count in char_count.items() if count > 1}
        if duplicates:
            print(f"重複文字: {duplicates}")